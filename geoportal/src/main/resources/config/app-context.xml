<?xml version="1.0" encoding="UTF-8"?>
<beans:beans 
      xmlns:beans="http://www.springframework.org/schema/beans"
  xmlns:context="http://www.springframework.org/schema/context"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

  <context:property-placeholder/>
  <context:annotation-config />

  <beans:import resource="app-security.xml" />
  <beans:import resource="app-factory.xml" />
  <beans:import resource="app-dcat.xml" />
  
  <beans:bean id="geoportalContext" class="com.esri.geoportal.context.GeoportalContext">
    <beans:property name="elasticContext" ref="elasticContext" />
    <beans:property name="harvesterContext" ref="harvesterContext" />
    <beans:property name="supportsApprovalStatus" value="false" />
    <beans:property name="defaultApprovalStatus" value="" /> <!-- optional - approved|reviewed|disapproved|incomplete|posted|draft -->
    <beans:property name="supportsGroupBasedAccess" value="false" />
    <beans:property name="defaultAccessLevel" value="" /> <!-- optional - public|private -->
    <beans:property name="parseGml" value="false" />
    <beans:property name="supportsCollections" value="true" />
    <beans:property name="numStacFeaturesAddItem" value="500" />
    <beans:property name="validateStacFields" value="${gpt_validateStacFields:true}" />
    <beans:property name="canStacAutogenerateId" value="${gpt_canStacAutogenerateId:true}" />
    <beans:property name="canStacGeomTransform" value="${gpt_canStacGeomTransform:false}" />
    <beans:property name="geometryService" value="${gpt_geometryService:}" />
    <beans:property name="geomWKTField" value="${gpt_geomWKTField:}" />
    <beans:property name="geomCRSField" value="${gpt_geomCRSField:}" />
  </beans:bean>
  
  <!-- the tokens like ${es_cluster:elasticsearch} ${gpt_indexName:metadata}
  represent environment variables that can be used to pass values into a spring configuration context, aka these files
  pattern is
  ${environment_Variable:defaultValue}
  Allows you to deploy to a server without having to build a new war file.
  see: docs/configureByEnvironmentVariable.md
  -->
  <beans:bean id="elasticContext" class="com.esri.geoportal.lib.elastic.ElasticContextHttp">
    <beans:property name="clusterName" value="elasticsearch" />
    <beans:property name="indexName" value="${gpt_indexName:metadata}" />
    <beans:property name="collectionIndexName" value="${gpt_collectionIndexName:collections}" />
    <beans:property name="indexNameIsAlias" value="true" />
    <beans:property name="autoCreateIndex" value="true" />
    <beans:property name="autoCreateCollectionIndex" value="true" />		
	<beans:property name="allowFileId" value="false" />
    <beans:property name="mappingsFile" value="${gpt_mappingsFile:config/elastic-mappings.json}" />
    <beans:property name="mappingsFile7" value="${gpt_mappingsFile:config/elastic-mappings-7.json}" />
    <beans:property name="httpPort" value="9200" />		
	<beans:property name="transportPort" value="9300" />  
	<beans:property name="proxyBufferSize" value="8192" />		
          	
    <!-- Uncomment and complete the following if you want to use secured index -->
    <beans:property name="useHttps" value="true" />
    <beans:property name="encryptPassword" value="false" />
    <!-- If encryptPassword =true, Uncomment below and configure the keys -->
	<!-- 
    <beans:property name="base64Key" value="${gpt_base64Key}" />
    <beans:property name="base64Iv" value="${gpt_base64Iv}" /> -->
   
   <beans:property name="username" value="" />
	<beans:property name="password" value="" />
    
	<beans:property name="engineType" value="${gpt_engineType:opensearch}"/> <!-- null | opensearch | elasticsearch -->		
	<beans:property name="awsOpenSearchType" value="${gpt_awsOpenSearchType:}"/> <!-- null for all other types of Opensearch | serverless | managed -->
	<!--If awsOpenSearchType = serverless, uncomment and configure awsALBEndpoint (AWS ALB)
		https://github.com/Esri/geoportal-server-catalog/tree/master/geoportal/doc/aws-serverless -->
	<!-- <beans:property name="awsALBEndpoint" value=""/>	 -->
	
    <beans:property name="nodes">
      <!-- The list of host names within the Elasticsearch cluster, one value element per host -->
      <beans:list>
        <beans:value>${es_node:}</beans:value>
      </beans:list>
    </beans:property>
  </beans:bean>
            
  <beans:bean id="stacContext" class="com.esri.geoportal.service.stac.StacContext">
    <beans:property name="validationRules">
      <beans:list>
        <!-- 
          rule definition string:
          rule_type ::= <type_unique> | <type_intersects_collection>
          type_unique ::= 'unique | ' <field1_name>,<field2_name>,...,<fieldN_name>
          type_intersects_collection ::= 'intersects_collection'
       
        <beans:value>${gpt_stacValidationRule1}</beans:value>
        <beans:value>${gpt_stacValidationRule2}</beans:value>-->
      </beans:list> 
    </beans:property>
  </beans:bean>  
  
  <beans:bean id="harvesterContext" class="com.esri.geoportal.lib.harvester.HarvesterContext">
    <beans:property name="nodes">
      <!-- The list of host names within the Harvester cluster, one value element per host -->
      <beans:list>
        <beans:value>${harvester_node:}</beans:value>
      </beans:list>
    </beans:property>
  </beans:bean>	
</beans:beans>