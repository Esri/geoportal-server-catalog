<?xml version="1.0" encoding="UTF-8"?>
<beans:beans 
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/security https://www.springframework.org/schema/security/spring-security-5.8.xsd">    
 
	<beans:bean id="passwordEncoder" class="org.springframework.security.crypto.password.DelegatingPasswordEncoder">
        <beans:constructor-arg value="bcrypt"/>
        <beans:constructor-arg>
            <beans:map>
                <beans:entry key="bcrypt" value-ref="bcryptEncoder"/>
                <beans:entry key="noop" value-ref="noopPassEncoder"/>
            </beans:map>
        </beans:constructor-arg>
    </beans:bean>
    <beans:bean id="bcryptEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
    <beans:bean id ="noopPassEncoder" class = "org.springframework.security.crypto.password.NoOpPasswordEncoder" />


  <!-- One and only one of the authentication methods must be implemented.
   Using an enviroment variable: gpt_authentication is the suggested method for changing this
  DEFAULT:
  gpt_authentication=authentication-simple.xml
  gpt_authentication=authentication-arcgis.xml
  gpt_authentication=authentication-ldap.xml -->
  <!-- <beans:import resource="authentication-arcgis.xml"/> -->
  <!-- <beans:import resource="authentication-ldap.xml"/> -->
  <!-- <beans:import resource="authentication-simple.xml"/> -->
  <!-- <beans:import resource="${gpt_authentication:authentication-arcgis.xml}"/> -->
  <!-- <beans:import resource="${gpt_authentication:authentication-ldap.xml}"/> -->
  <!-- <beans:import resource="${gpt_authentication:authentication-simple.xml}"/> -->
  <beans:import resource="${gpt_authentication:authentication-simple.xml}"/>
  
  <beans:import resource="app-oauth.xml"/>
  <security:http realm="Geoportal" pattern="/**" authentication-manager-ref="authenticationManager">
    <security:headers>
       <security:frame-options policy="SAMEORIGIN"/>
       <security:header name="Access-Control-Allow-Origin" value="*" />
       <security:header name="Access-Control-Allow-Headers" value="Content-Type, Authorization, X-Requested-With" />
    </security:headers>
    <security:csrf disabled="true"/>
    <security:http-basic />
    <security:custom-filter ref="oauthResourceFilter" before="PRE_AUTH_FILTER" />
    <security:intercept-url pattern="/" access="hasRole('ADMIN')" />
	  
	  <!-- deny CsW and ogcrecords service-->
    <security:intercept-url pattern="/csw/**" access="denyAll" />
    <security:intercept-url pattern="/ogcrecords/**" access="denyAll"/>
	  
    <!-- /stac - the stac catalog -->
    <security:intercept-url pattern="/stac" method="GET" access="hasRole('ADMIN')" />
    <security:intercept-url pattern="/stac/conformance" method="GET" access="hasRole('ADMIN')" />
    <security:intercept-url pattern="/stac/api" method="GET" access="hasRole('ADMIN')" />
    <security:intercept-url pattern="/stac/collections/**" method="GET" access="hasRole('ADMIN')" />
    <security:intercept-url pattern="/stac/search" method="GET" access="hasRole('ADMIN')" />
    <security:intercept-url pattern="/stac/search" method="POST" access="hasRole('ADMIN')" />     
    <security:intercept-url pattern="/stac/collections/**" method="POST" access="hasRole('ADMIN')" />
    <security:intercept-url pattern="/stac/collections/**" method="PUT" access="hasRole('ADMIN')" />
    <security:intercept-url pattern="/stac/collections/**" method="DELETE" access="hasRole('ADMIN')" />
    
    <!-- /rest/metadata/ - the metadata catalog -->
    <security:intercept-url pattern="/rest/metadata/bulk/**" access="hasRole('ADMIN')" />
    <security:intercept-url pattern="/rest/metadata/item/*" method="GET" access="hasRole('ADMIN')" />
    <security:intercept-url pattern="/rest/metadata/item/*/html" method="GET" access="hasRole('ADMIN')" />
    <security:intercept-url pattern="/rest/metadata/item/*/xml" method="GET" access="hasRole('ADMIN')" />
    <security:intercept-url pattern="/rest/metadata/item/*/owner/*" method="PUT" access="hasRole('ADMIN')" />
    <security:intercept-url pattern="/rest/metadata/realias" access="hasRole('ADMIN')" />
    <security:intercept-url pattern="/rest/metadata/reindex" access="hasRole('ADMIN')" />
    <security:intercept-url pattern="/rest/metadata/search" access="hasRole('ADMIN')" />
    <security:intercept-url pattern="/rest/metadata/transform" access="hasRole('ADMIN')" />
    <security:intercept-url pattern="/rest/metadata/validate" access="hasRole('ADMIN')" />
    <security:intercept-url pattern="/rest/metadata/**" access="hasRole('ADMIN')" />
    
    <!-- /elastic/ - proxied to the Elasticsearch cluster -->
    <security:intercept-url pattern="/elastic1/stac/collections" method="GET" access="hasRole('ADMIN')" />
    <security:intercept-url pattern="/elastic/gsdb_metadata/_count/**" access="hasRole('ADMIN')" />
    <security:intercept-url pattern="/elastic/gsdb_metadata/*/_count/**" access="hasRole('ADMIN')" />
    <security:intercept-url pattern="/elastic/gsdb_metadata/_search/**" access="hasRole('ADMIN')" />
    <security:intercept-url pattern="/elastic/gsdb_metadata/*/_search/**" access="hasRole('ADMIN')" />
    <security:intercept-url pattern="/elastic/gsdb_metadata/_mappings/**" method="GET" access="hasRole('ADMIN')" />
    <security:intercept-url pattern="/elastic/gsdb_metadata/*/_mappings/**" method="GET" access="hasRole('ADMIN')" />
    <security:intercept-url pattern="/elastic/_search/scroll/**" access="hasRole('ADMIN')" />
    <security:intercept-url pattern="/elastic/**" access="hasRole('ADMIN')" />
    
    <!-- /harvester/ - proxied to the Harvester -->
    <security:intercept-url pattern="/harvester/**" access="hasRole('ADMIN')" />
    
  </security:http>

</beans:beans>