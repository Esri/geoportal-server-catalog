{
  "swagger": "2.0",
  "info": {
    "description": "https://github.com/Esri/geoportal-server-catalog",
    "version": "2.7.2",
    "title": "Esri Geoportal Server",
    "contact": {
      "name": "portal@esri.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "basePath": "/geoportal",
  "tags": [
    {
      "name": "STAC"
    },
    {
      "name": "OGCRECORDS"
    },
    {
      "name": "CSW"
    },
    {
      "name": "REST"
    }
  ],
  "paths": {
    "/stac": {
      "get": {
        "tags": [
          "STAC"
        ],
        "summary": "Landing page for Geoportal Server STAC Records API.",
        "description": "",
        "operationId": "stacDescription",
        "parameters": [				
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/stac/conformance": {
      "get": {
        "tags": [
          "STAC"
        ],
        "summary": "Provides information on STAC API conformance",
        "description": "",
        "operationId": "stacConformance",
        "parameters": [				
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/stac/collections": {
      "get": {
        "tags": [
          "STAC"
        ],
        "summary": "Link to the collections",
        "description": "",
        "operationId": "stacCollections",
        "parameters": [
          {
            "name": "outCRS",
            "in": "query",
            "description": "CRS to return collection geometries in",
            "required": false,
            "type": "string",
            "example": "EPSG:3857"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "post": {
        "tags": [
          "STAC"
        ],
        "summary": "Add Stac collection in Geoportal catalog",
        "produces": [
          "application/json"
        ],
        "operationId": "stacCollectionsPost",                                                                                                                                                                                        
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "https://github.com/radiantearth/stac-spec/blob/master/collection-spec/collection-spec.md",
            "required": true      
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }			
      },
      "put": {
        "tags": [
          "STAC"
        ],
        "summary": "Update collection",
        "produces": [
          "application/json"
        ],
        "operationId": "stacCollectionsPut",                                                                                                                                                                                        
        "parameters": [          
          {
            "name": "body",
            "in": "body",
            "description": "https://github.com/radiantearth/stac-spec/blob/master/collection-spec/collection-spec.md",
            "required": true      
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }	
      }
    },	
    "/stac/collections/{collectionId}": {
      "get": {
        "tags": [
          "STAC"
        ],
        "summary": "Link to the Metadata collection",
        "description": "",
        "operationId": "stacCollectionMetadata",
        "parameters": [	
          {
            "name": "collectionId",
            "in": "path",
            "description": "Collection id",
            "required": true,
            "type": "string",
            "example": "metadata"
          },
          {
            "name": "outCRS",
            "in": "query",
            "description": "CRS to return collection geometries in",
            "required": false,
            "type": "string",
            "example": "EPSG:3857"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": [
          "STAC"
        ],
        "summary": "Delete STAC collection",
        "description": "",
        "operationId": "stacCollectionDelete",
        "parameters": [	
          {
            "name": "collectionId",
            "in": "path",
            "description": "Collection id",
            "required": true,
            "type": "string",
            "example": "metadata"
          }			
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }	
      }
    },
    "/stac/collections/{collectionId}/items": {
      "get": {
        "tags": [
          "STAC"
        ],
        "summary": "Metadata collection items.",
        "description": "",
        "produces": [
          "application/geo+json"
        ],
        "operationId": "stacCollectionMetadataItems",                                                                                                                                                                                        
        "parameters": [
          {
            "name": "collectionId",
            "in": "path",
            "description": "Collection id",
            "required": true,
            "type": "string",
            "example": "metadata"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Minimum = 1. Maximum = 10000, Default = 10.",
            "required": false,
            "type": "integer",
            "example": 15
          },
          {
            "name": "bbox",
            "in": "query",
            "description": "Only features that have a geometry that intersects the bounding box are selected.",
            "required": false,
            "type": "ArrayofNumbers",
            "example": "-171.791110603,18.91619,-66.96466,71.3577635769"
          },
          {
            "name": "datetime",
            "in": "query",
            "description": "Either a date-time or an interval, open or closed. Date and time expressions adhere to RFC 3339. Open intervals are expressed using double-dots.",
            "required": false,
            "type": "String",
            "example": "2023-06-12T23:20:50Z/.."
          },
          {
            "name": "outCRS",
            "in": "query",
            "description": "CRS to return item geometries in",
            "required": false,
            "type": "string",
            "example": "EPSG:3857"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "post": {
        "tags": [
          "STAC"
        ],
        "summary": "Add STAC item to collection",
        "description": "Add a new STAC item to the specified collection",
        "produces": [
          "application/json"
        ],
        "operationId": "stacCollectionMetadataItemsAdd",                                                                                                                                                                                        
        "parameters": [
          {
            "name": "collectionId",
            "in": "path",
            "description": "Collection id",
            "required": true,
            "type": "string",
            "example": "metadata"
          },
          {
            "name": "body",
            "in": "body",
            "description": "https://github.com/radiantearth/stac-spec/blob/master/collection-spec/collection-spec.md",
            "required": true      
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": [
          "STAC"
        ],
        "summary": "Delete Stac collection items.",
        "description": "",
        "produces": [
          "application/json"
        ],
        "operationId": "delStacCollectionItems",                                                                                                                                                                                        
        "parameters": [
          {
            "name": "collectionId",
            "in": "path",
            "description": "Collection id",
            "required": true,
            "type": "string",
            "example": "metadata"
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Comma separated list of Stac item id",
            "required": false,
            "type": "string",
            "example": "test_87,test_88"
          },
          {
            "name": "deleteCollection",
            "in": "query",
            "description": "Default is false. If true, collection will also be deleted. Cannot be used if ids provided.",
            "required": false,
            "type": "boolean",
            "example": "true or false"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/stac/collections/{collectionId}/items/{id}": {
      "get": {
        "tags": [
          "STAC"
        ],
        "summary": "Get a feature.",
        "description": "Get a feature.",
        "produces": [
          "application/geo+json"
        ],
        "operationId": "stacGetItem",                                                                                                                                                                                        
        "parameters": [
          {
            "name": "collectionId",
            "in": "path",
            "description": "Collection id",
            "required": true,
            "type": "string",
            "example": "metadata"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Stac item id",
            "required": true,
            "type": "string",
            "example": "LC80100252015082LGN00"
          },
          {
            "name": "outCRS",
            "in": "query",
            "description": "CRS to return item geometries in",
            "required": false,
            "type": "string",
            "example": "EPSG:3857"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "STAC"
        ],
        "summary": "Update a STAC item.",
        "description": "Update a STAC item.",
        "produces": [
          "application/json"
        ],
        "operationId": "stacItemPut",                                                                                                                                                                                        
        "parameters": [
          {
            "name": "collectionId",
            "in": "path",
            "description": "Collection id",
            "required": true,
            "type": "string",
            "example": "metadata"
          },
          {
            "name": "id",
            "in": "path",
            "description": "STAC item id",
            "required": true,
            "type": "string",
            "example": "LC80100252015082LGN00"
          },
          {
            "name": "body",
            "in": "body",
            "description": "https://github.com/radiantearth/stac-spec/blob/master/collection-spec/item-spec.md",
            "required": true      
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "patch": {
        "tags": [
          "STAC"
        ],
        "summary": "Update parts of a STAC item.",
        "description": "Update provided parts of a STAC item.",
        "produces": [
          "application/json"
        ],
        "operationId": "stacItemPatch",                                                                                                                                                                                        
        "parameters": [
          {
            "name": "collectionId",
            "in": "path",
            "description": "Collection id",
            "required": true,
            "type": "string",
            "example": "metadata"
          },
          {
            "name": "id",
            "in": "path",
            "description": "STAC item id",
            "required": true,
            "type": "string",
            "example": "LC80100252015082LGN00"
          },
          {
            "name": "body",
            "in": "body",
            "description": "https://github.com/radiantearth/stac-spec/blob/master/collection-spec/item-spec.md",
            "required": true      
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": [
          "STAC"
        ],
        "summary": "Delete a feature.",
        "description": "Delete a feature.",
        "produces": [
          "application/json"
        ],
        "operationId": "deleteStacItemWithId",                                                                                                                                                                                        
        "parameters": [
          {
            "name": "collectionId",
            "in": "path",
            "description": "Collection id",
            "required": true,
            "type": "string",
            "example": "metadata"
          },          
          {
            "name": "id",
            "in": "path",
            "description": "Stac item id",
            "required": true,
            "type": "string",
            "example": "LC80100252015082LGN00"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/stac/search": {
      "get": {
        "tags": [
          "STAC"
        ],
        "summary": "Retrieve Items matching filters.",
        "description": "Intended as a shorthand API for simple queries.",
        "produces": [
          "application/geo+json"
        ],
        "operationId": "stacSearch",                                                                                                                                                                                        
        "parameters": [
          {
            "name": "collections",
            "in": "query",
            "description": "Comma separated Collection id",
            "required": false,
            "type": "string",
            "example": "metadata,test"
          },          
          {
            "name": "limit",
            "in": "query",
            "description": "Minimum = 1. Maximum = 10000, Default = 10.",
            "required": false,
            "type": "integer",
            "example": 15
          },
          {
            "name": "bbox",
            "in": "query",
            "description": "Only features that have a geometry that intersects the bounding box are selected.s",
            "required": false,
            "type": "Array of Numbers",
            "example": "-171.791110603,18.91619,-66.96466,71.3577635769"
          },
          {
            "name": "intersects",
            "in": "query",
            "description": "pointGeoJSON (object) or multipointGeoJSON (object) or linestringGeoJSON (object) or multilinestringGeoJSON (object) or polygonGeoJSON (object) or multipolygonGeoJSON (object) or geometrycollectionGeoJSON (object) (geometryGeoJSON)",
            "required": false,
            "type": "GeoJSON object",
            "example": "{\"type\":\"Polygon\",\"coordinates\":[[[-67.18661657269904,48.297014795971687],[-67.1872,48.2971],[-67.17322376288064,48.33374073671041],[-67.1590065133506,48.371013322480617],[-66.6453207034186,49.7177153248036],[-66.63275537806288,49.750657151284347],[-66.6171,49.7917],[-66.61637825143734,49.79159448137363],[-64.1246,49.4273],[-64.14045802174776,49.39048646945745],[-64.74832861700387,47.979348114350958],[-64.7639,47.9432],[-67.18661657269904,48.297014795971687]]]}"
          },
          {
            "name": "datetime",
            "in": "query",
            "description": "Either a date-time or an interval, open or closed. Date and time expressions adhere to RFC 3339. Open intervals are expressed using double-dots",
            "required": false,
            "type": "String",
            "example": "2023-06-12T23:20:50Z/.."
          },

          {
            "name": "ids",
            "in": "query",
            "description": "Comma separated list of Item ids to return.",
            "required": false,
            "type": "Comma separated list of Item ids to return",
            "example": "LC80100252015082LGN00,LC80100252014287LGN00"
          },
          {
            "name": "outCRS",
            "in": "query",
            "description": "CRS to return item geometries in",
            "required": false,
            "type": "string",
            "example": "EPSG:3857"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },    
      "post": {
        "tags": [
          "STAC"
        ],
        "summary": "Retrieve Items matching filters.",
        "description": "Intended as the standard, full-featured query API.",
        "produces": [
          "application/geo+json"
        ],
        "operationId": "stacSearchPost",                                                                                                                                                                                        
        "parameters": [          
          {
            "name": "body",
            "in": "body",
            "description": "https://api.stacspec.org/v1.0.0/item-search/#tag/Item-Search/operation/postItemSearch",
            "required": true,
            "example": "{\"bbox\":[-66.6459,49.354,-63.4856,51.2101],\"datetime\":\"2018-02-12T00:00:00Z/2023-07-18T12:31:12Z\",\"intersects\":{\"type\":\"Polygon\",\"coordinates\":[[[-67.18661657269904,48.297014795971687],[-67.1872,48.2971],[-67.17322376288064,48.33374073671041],[-67.1590065133506,48.371013322480617],[-66.6453207034186,49.7177153248036],[-66.63275537806288,49.750657151284347],[-66.6171,49.7917],[-66.61637825143734,49.79159448137363],[-64.1246,49.4273],[-64.14045802174776,49.39048646945745],[-64.74832861700387,47.979348114350958],[-64.7639,47.9432],[-67.18661657269904,48.297014795971687]]]},\"ids\":[\"LC80100252015082LGN00\",\"LC80100252014287LGN00\"],\"limit\":10,\"collections\":[\"metadata\",\"test\"],\"outCRS\":\"EPSG:3857\"}"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/ogcrecords": {
      "get": {
        "tags": [
          "OGCRECORDS"
        ],
        "summary": "Landing page for Geoportal Server OGC Records API.",
        "description": "",
        "operationId": "ogcDescription",
        "parameters": [				
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/ogcrecords/conformance": {
      "get": {
        "tags": [
          "OGCRECORDS"
        ],
        "summary": "Provides information on OGCRECORDS API conformance",
        "description": "",
        "operationId": "ogcConformance",
        "parameters": [				
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/ogcrecords/collections/metadata": {
      "get": {
        "tags": [
          "OGCRECORDS"
        ],
        "summary": "Link to the Metadata collection",
        "description": "",
        "operationId": "ogcCollectionMetadata",
        "parameters": [				
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/ogcrecords/collections/metadata/queryables": {
      "get": {
        "tags": [
          "OGCRECORDS"
        ],
        "summary": "Link to the Metadata queryables",
        "description": "",
        "operationId": "ogcCollectionMetadataQuerables",
        "parameters": [				
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/ogcrecords/collections/metadata/items": {
      "get": {
        "tags": [
          "OGCRECORDS"
        ],
        "summary": "Metadata collection items.",
        "description": "",
        "operationId": "ogcCollectionMetadataItems",                                                                                                                                                                                        
        "parameters": [

          {
            "name": "limit",
            "in": "query",
            "description": "Minimum = 1. Maximum = 10000, Default = 10.",
            "required": false,
            "type": "integer",
            "example": 15
          },
          {
            "name": "querydsl",
            "in": "query",
            "description": "Features matching the supplied query (JSON Elasticsearch Query DSL).Other querables are ignored.",
            "required": false,           
            "type": "Json string",
            "example": "{\"query\":{\"bool\": {\"must\":[{\"match\":{\"sys_owner_s\":\"admin\"}}]}}}"
          },
          {
            "name": "bbox",
            "in": "query",
            "description": "Only features that have a geometry that intersects the bounding box are selected.",
            "required": false,
            "type": "ArrayofNumbers",
            "example": "-171.791110603,18.91619,-66.96466,71.3577635769"
          },
          {
            "name": "title",
            "in": "query",
            "description": "Only features with title are selected",
            "required": false,
            "type": "String",
            "example": "SampleFeatureService"
          },
          {
            "name": "provider",
            "in": "query",
            "description": "Only features owned by this provider will be selected",
            "required": false,
            "type": "String",
            "example": "admin"
          },
          {
            "name": "datetime",
            "in": "query",
            "description": "Either a date-time or an interval, open or closed. Date and time expressions adhere to RFC 3339. Open intervals are expressed using double-dots.",
            "required": false,
            "type": "String",
            "example": "2023-06-12T23:20:50Z/.."
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/ogcrecords/collections/metadata/items/{id}": {
      "get": {
        "tags": [
          "OGCRECORDS"
        ],
        "summary": "Get a feature.",
        "description": "Get a feature.",
        "operationId": "ogcCollectionMetadataItemWithIds",                                                                                                                                                                                        
        "parameters": [          
          {
            "name": "id",
            "in": "path",
            "description": "Ogcrecords item id",
            "required": true,
            "type": "string",
            "example": "LC80100252015082LGN00"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/oauth/token": {            
      "post": {
        "tags": [
          "REST"
        ],
        "summary": "Generates geoportal JWT token",
        "description": "Generates geoportal JWT token for ArcGIS Portal authentication. Append generated access_token with each subsequent request to geoportal server.",
        "produces": [
          "application/json"
        ],
        "operationId": "genJwtToken",                                                                                                                                                                                        
        "parameters": [                   
          {
            "name": "username",
            "in": "query",
            "description": "User name",
            "required": true      
          },
          {
            "name": "password",
            "in": "query",
            "description": "User password. For ArcGIS Portal authentication, prefix ArcGIS token with \\__rtkn\\__:",
            "required": true      
          },
          {
            "name": "client_id",
            "in": "query",
            "description": "Client id for token. This will always be geoportal-client",
            "required": true,
            "example": "geoportal-client"     
          },
          {
            "name": "grant_type",
            "in": "query",
            "description": "Grant type for token. This will always be password",
            "required": true,
            "example": "password"    
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/rest/geoportal": {
      "get": {
        "tags": [
          "REST"
        ],
        "summary": "Provides information on the Geoportal application itself.",
        "description": "",
        "operationId": "getSelf",
        "parameters": [
          {
            "name": "pretty",
            "in": "query",
            "description": "for an indented response",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/rest/metadata/deleteItems": {
      "delete": {
        "tags": [
          "REST"
        ],
        "summary": "Delete one or more items.",
        "operationId": "deleteItems",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "delete this item id only (field: _id)",
            "required": false,
            "type": "string"
          },
          {
            "name": "owner",
            "in": "query",
            "description": "delete all items owned by this user (field: sys_owner_s)",
            "required": false,
            "type": "string"
          },
          {
            "name": "sourceUri",
            "in": "query",
            "description": "delete all items associated with this harvesting uri (field: src_source_uri_s)",
            "required": false,
            "type": "string"
          },
          {
            "name": "sourceRef",
            "in": "query",
            "description": "delete all items associated with this harvesting reference (field: src_source_ref_s)",
            "required": false,
            "type": "string"
          },
          {
            "name": "taskRef",
            "in": "query",
            "description": "delete all items associated with this harvesting task reference (field: src_task_ref_s)",
            "required": false,
            "type": "string"
          },
          {
            "name": "pretty",
            "in": "query",
            "description": "for an indented response",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Delete all items matching the supplied query (JSON Elasticsearch Query DSL)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/rest/metadata/item": {
      "put": {
        "tags": [
          "REST"
        ],
        "summary": "Publish an item.",
        "description": "Requires a Publisher role.<ul>Content can be supplied as either:<li>an XML document representing the metadata for the item</li><li>a JSON document representing the item (use xml='xmlString' to supply the metadata)</li></ul>",
        "operationId": "put",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pretty",
            "in": "query",
            "description": "for an indented response",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "async",
            "in": "query",
            "description": "returns immediately if true",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/rest/metadata/item/{id}": {
      "get": {
        "tags": [
          "REST"
        ],
        "summary": "Get an item.",
        "description": "",
        "operationId": "get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the item id",
            "required": true,
            "type": "string"
          },
          {
            "name": "pretty",
            "in": "query",
            "description": "for an indented response",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "f",
            "in": "query",
            "description": "the response format",
            "required": false,
            "type": "string",
            "enum": [
              "json",
              "atom",
              "csw"
            ]
          },
          {
            "name": "includeMetadata",
            "in": "query",
            "description": "true if metadata xml should be included as a json property",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "REST"
        ],
        "summary": "Publish or update item using the supplied identifier.",
        "description": "Requires a Publisher role. Only the item owner (or an Admin) can delete an item.<ul>Content can be supplied as either:<li>an XML document representing the metadata for the item</li><li>a JSON document representing the item (use xml='xmlString' to supply the metadata)</li></ul>",
        "operationId": "putWithId",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "the item id",
            "required": true,
            "type": "string"
          },
          {
            "name": "pretty",
            "in": "query",
            "description": "for an indented response",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": [
          "REST"
        ],
        "summary": "Delete an item.",
        "description": "Only the item owner (or an Admin) can delete an item.",
        "operationId": "delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the item id",
            "required": true,
            "type": "string"
          },
          {
            "name": "pretty",
            "in": "query",
            "description": "for an indented response",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/rest/metadata/item/{id}/html": {
      "get": {
        "tags": [
          "REST"
        ],
        "summary": "Get the HTML details for an item.",
        "description": "transformed from the metadata XML",
        "operationId": "getHtml",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the item id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/rest/metadata/item/{id}/xml": {
      "get": {
        "tags": [
          "REST"
        ],
        "summary": "Get the metadata XML for an item.",
        "description": "",
        "operationId": "getXml",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the item id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/rest/metadata/realias": {
      "get": {
        "tags": [
          "REST"
        ],
        "summary": "Reset the index associated with the 'metadata' alias.",
        "description": "Requires an Admin role. The active Elasticsearch index is determined by an Elasticsearch alias (alias 'metadata' initially pointing to an index named 'metadata_v1').",
        "operationId": "realiasUsingGet",
        "parameters": [
          {
            "name": "pretty",
            "in": "query",
            "description": "for an indented response",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "indexName",
            "in": "query",
            "description": "the index to associate with the 'metadata' alias",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/rest/metadata/reindex": {
      "get": {
        "tags": [
          "REST"
        ],
        "summary": "Re-index content.",
        "description": "Requires an Admin role. This operation may require a different approach for very large indexes.",
        "operationId": "reindexUsingGet",
        "parameters": [
          {
            "name": "pretty",
            "in": "query",
            "description": "for an indented response",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "fromIndexName",
            "in": "query",
            "description": "the source",
            "required": true,
            "type": "string"
          },
          {
            "name": "toIndexName",
            "in": "query",
            "description": "the destination",
            "required": true,
            "type": "string"
          },
          {
            "name": "fromVersionCue",
            "in": "query",
            "description": "a cue for the version of the from index (not currently used).",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/rest/metadata/search": {
      "get": {
        "tags": [
          "REST"
        ],
        "summary": "Search for items.",
        "description": "",
        "operationId": "searchUsingGet",
        "parameters": [
          {
            "name": "pretty",
            "in": "query",
            "description": "for an indented response",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "f",
            "in": "query",
            "description": "the response format",
            "required": false,
            "type": "string",
            "enum": [
              "atom",
              "json",
              "csw",
              "rss",
              "csv",
              "kml",
              "eros",
              "json-source"
            ]
          },
          {
            "name": "q",
            "in": "query",
            "description": "the search terms",
            "required": false,
            "type": "string"
          },
          {
            "name": "start",
            "in": "query",
            "description": "the starting index (1 is the first)",
            "required": false,
            "type": "integer"
          },
          {
            "name": "num",
            "in": "query",
            "description": "the number of items to return",
            "required": false,
            "type": "integer"
          },
          {
            "name": "bbox",
            "in": "query",
            "description": "the bounding envelope WGS84 (bbox=xmin,ymin,xmax,ymax)",
            "required": false,
            "type": "string"
          },
          {
            "name": "time",
            "in": "query",
            "description": "the time period for the resource (time=start/end) (ISO 8601)",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "in": "query",
            "description": "an item id (multiples allowed: id=&id=&id=)",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "modified",
            "in": "query",
            "description": "the modified date for the item (modified=start/end) (ISO 8601)",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "a secondary filter (search terms)",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "description": "an item type (multiples allowed: type=&type=&type=)",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "the time period for the resource (time=start/end) (ISO 8601)",
            "required": false,
            "type": "string"
          },
          {
            "name": "target",
            "in": "query",
            "description": "the target catalog, a JSON structure (object or array) with the following properties: url - the target url, type - the type (geoportal|portal|csw2|csw3), profile - the profile, current profiles: CSW2_Geoportal1",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "post": {
        "tags": [
          "REST"
        ],
        "summary": "Search for items.",
        "description": "",
        "operationId": "searchUsingPost",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "pretty",
            "in": "query",
            "description": "for an indented response",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "f",
            "in": "query",
            "description": "the response format",
            "required": false,
            "type": "string",
            "enum": [
              "atom",
              "json",
              "csw",
              "rss",
              "csv",
              "kml",
              "eros",
              "json-source"
            ]
          },
          {
            "name": "q",
            "in": "query",
            "description": "the search terms",
            "required": false,
            "type": "string"
          },
          {
            "name": "start",
            "in": "query",
            "description": "the starting index (1 is the first)",
            "required": false,
            "type": "integer"
          },
          {
            "name": "num",
            "in": "query",
            "description": "the number of items to return",
            "required": false,
            "type": "integer"
          },
          {
            "name": "bbox",
            "in": "query",
            "description": "the bounding envelope WGS84 (bbox=xmin,ymin,xmax,ymax)",
            "required": false,
            "type": "string"
          },
          {
            "name": "time",
            "in": "query",
            "description": "the time period for the resource (time=start/end) (ISO 8601)",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "in": "query",
            "description": "an item id (multiples allowed: id=&id=&id=)",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "modified",
            "in": "query",
            "description": "the modified date for the item (modified=start/end) (ISO 8601)",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "a secondary filter (search terms)",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "description": "an item type (multiples allowed: type=&type=&type=)",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "the time period for the resource (time=start/end) (ISO 8601)",
            "required": false,
            "type": "string"
          },
          {
            "name": "target",
            "in": "query",
            "description": "the target catalog, a JSON structure (object or array) with the following properties: url - the target url, type - the type (geoportal|portal|csw2|csw3|elasticsearch), profile - the profile, current profiles: CSW2_Geoportal1",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/rest/metadata/setAccess": {
      "put": {
        "tags": [
          "REST"
        ],
        "summary": "Set the access level for one or more items (fields: sys_access_s and sys_access_groups_s).",
        "operationId": "setAccess",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "access",
            "in": "query",
            "description": "the access level: public or private",
            "required": true,
            "type": "string"
          },
          {
            "name": "group",
            "in": "query",
            "description": "the group key, can be supplied multiple times (e.g. ?access=private&group=a&group=b&group=c)",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "apply change to this item id only (field: _id)",
            "required": false,
            "type": "string"
          },
          {
            "name": "owner",
            "in": "query",
            "description": "apply change to all items owned by this user (field: sys_owner_s)",
            "required": false,
            "type": "string"
          },
          {
            "name": "sourceUri",
            "in": "query",
            "description": "apply change to all items associated with this harvesting uri (field: src_source_uri_s)",
            "required": false,
            "type": "string"
          },
          {
            "name": "sourceRef",
            "in": "query",
            "description": "apply change to all items associated with this harvesting reference (field: src_source_ref_s)",
            "required": false,
            "type": "string"
          },
          {
            "name": "taskRef",
            "in": "query",
            "description": "apply change to all items associated with this harvesting task reference (field: src_task_ref_s)",
            "required": false,
            "type": "string"
          },
          {
            "name": "pretty",
            "in": "query",
            "description": "for an indented response",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Apply change to all items matching the supplied query (JSON Elasticsearch Query DSL)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/rest/metadata/setApprovalStatus": {
      "put": {
        "tags": [
          "REST"
        ],
        "summary": "Set the approval status for one or more items (field: sys_approval_status_s).",
        "description": "Requires an Admin role.",
        "operationId": "setApprovalStatus",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "approvalStatus",
            "in": "query",
            "description": "the new approval status: approved, reviewed, disapproved, incomplete, posted or draft",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "query",
            "description": "apply change to this item id only (field: _id)",
            "required": false,
            "type": "string"
          },
          {
            "name": "owner",
            "in": "query",
            "description": "apply change to all items owned by this user (field: sys_owner_s)",
            "required": false,
            "type": "string"
          },
          {
            "name": "sourceUri",
            "in": "query",
            "description": "apply change to all items associated with this harvesting uri (field: src_source_uri_s)",
            "required": false,
            "type": "string"
          },
          {
            "name": "sourceRef",
            "in": "query",
            "description": "apply change to all items associated with this harvesting reference (field: src_source_ref_s)",
            "required": false,
            "type": "string"
          },
          {
            "name": "taskRef",
            "in": "query",
            "description": "apply change to all items associated with this harvesting task reference (field: src_task_ref_s)",
            "required": false,
            "type": "string"
          },
          {
            "name": "pretty",
            "in": "query",
            "description": "for an indented response",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Apply change to all items matching the supplied query (JSON Elasticsearch Query DSL)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/rest/metadata/setOwner": {
      "put": {
        "tags": [
          "REST"
        ],
        "summary": "Set the owner for one or more items (field: sys_owner_s).",
        "description": "Requires an Admin role.",
        "operationId": "setOwner",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "newOwner",
            "in": "query",
            "description": "the new owner",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "query",
            "description": "apply change to this item id only (field: _id)",
            "required": false,
            "type": "string"
          },
          {
            "name": "owner",
            "in": "query",
            "description": "apply change to all items owned by this user (field: sys_owner_s)",
            "required": false,
            "type": "string"
          },
          {
            "name": "sourceUri",
            "in": "query",
            "description": "apply change to all items associated with this harvesting uri (field: src_source_uri_s)",
            "required": false,
            "type": "string"
          },
          {
            "name": "sourceRef",
            "in": "query",
            "description": "apply change to all items associated with this harvesting reference (field: src_source_ref_s)",
            "required": false,
            "type": "string"
          },
          {
            "name": "taskRef",
            "in": "query",
            "description": "apply change to all items associated with this harvesting task reference (field: src_task_ref_s)",
            "required": false,
            "type": "string"
          },
          {
            "name": "pretty",
            "in": "query",
            "description": "for an indented response",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Apply change to all items matching the supplied query (JSON Elasticsearch Query DSL)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/rest/metadata/transform": {
      "post": {
        "tags": [
          "REST"
        ],
        "summary": "Transform an XML document.",
        "description": "",
        "operationId": "transformUsingPost",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "text/html"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "xslt",
            "in": "query",
            "description": "the xslt name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/rest/metadata/validate": {
      "post": {
        "tags": [
          "REST"
        ],
        "summary": "Validate an XML document.",
        "description": "",
        "operationId": "validateUsingPost",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pretty",
            "in": "query",
            "description": "for an indented response",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/csw?request=GetCapabilities": {
      "get": {
        "tags": [
          "CSW"
        ],
        "summary": "GetCapabilities",
        "description": "Return Catalog Service capabilities document",
        "operationId": "getGetCapabilities",
        "consumes": [],
        "produces": [
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "request",
            "description": "Type of OGC request. Fixed to GetCapabilities",
            "required": true,
            "enum": [
              "GetCapabilities"
            ],
            "type": "string"
          },
          {
            "name": "service",
            "in": "query",
            "description": "indicates OGC service type. Fixed to CSW",
            "required": true,
            "type": "string",
            "enum": [
              "CSW"
            ]
          },
          {
            "name": "version",
            "in": "query",
            "description": "CSW version (2.0.2 or 3.0.0)",
            "required": true,
            "type": "string",
            "enum": [
              "2.0.2",
              "3.0.0"
            ]
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "post": {
        "tags": [
          "CSW"
        ],
        "summary": "GetCapabilities",
        "description": "Return Catalog Service capabilities document",
        "operationId": "postGetCapabilities",
        "consumes": [],
        "produces": [
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "request",
            "description": "Type of OGC request. Fixed to GetCapabilities",
            "required": true,
            "type": "string",
            "enum": [
              "GetCapabilities"
            ]
          },
          {
            "name": "service",
            "in": "query",
            "description": "indicates OGC service type. Fixed to CSW",
            "required": true,
            "type": "string",
            "enum": [
              "CSW"
            ]
          },
          {
            "name": "version",
            "in": "query",
            "description": "CSW version (2.0.2 or 3.0.0)",
            "required": true,
            "type": "string",
            "enum": [
              "2.0.2",
              "3.0.0"
            ]
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/csw?request=DescribeRecord": {
      "get": {
        "tags": [
          "CSW"
        ],
        "summary": "DescribeRecord",
        "description": "Return Catalog Service record description",
        "operationId": "getDescribeRecord",
        "consumes": [],
        "produces": [
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "request",
            "description": "Type of OGC request. Fixed to DescribeRecord",
            "required": true,
            "type": "string",
            "enum": [
              "DescribeRecord"
            ]
          },
          {
            "name": "service",
            "in": "query",
            "description": "indicates OGC service type. Fixed to CSW",
            "required": true,
            "type": "string",
            "enum": [
              "CSW"
            ]
          },
          {
            "name": "version",
            "in": "query",
            "description": "CSW version",
            "required": true,
            "type": "string",
            "enum": [
              "2.0.2"
            ]
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "post": {
        "tags": [
          "CSW"
        ],
        "summary": "DescribeRecord",
        "description": "Return Catalog Service record description",
        "operationId": "postDescribeRecord",
        "consumes": [],
        "produces": [
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "request",
            "description": "Type of OGC request. Fixed to DescribeRecord",
            "required": true,
            "type": "string",
            "enum": [
              "DescribeRecord"
            ]
          },
          {
            "name": "service",
            "in": "query",
            "description": "indicates OGC service type. Fixed to CSW",
            "required": true,
            "type": "string",
            "enum": [
              "CSW"
            ]
          },
          {
            "name": "version",
            "in": "query",
            "description": "CSW version",
            "required": true,
            "type": "string",
            "enum": [
              "2.0.2"
            ]
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/csw": {
      "post": {
        "tags": [
          "CSW"
        ],
        "summary": "GetRecords",
        "description": "Perform a search",
        "operationId": "postGetRecords",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "request",
            "description": "Type of OGC request. Fixed to GetRecords",
            "required": true,
            "type": "string",
            "enum": [
              "GetRecords"
            ]
          },
          {
            "name": "service",
            "in": "query",
            "description": "indicates OGC service type. Fixed to CSW",
            "required": true,
            "type": "string",
            "enum": [
              "CSW"
            ]
          },
          {
            "name": "version",
            "in": "query",
            "description": "CSW version",
            "required": true,
            "type": "string",
            "enum": [
              "2.0.2",
              "3.0.0"
            ]
          },
          {
            "name": "body",
            "in": "body",
            "description": "CSW GetRecords request body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetRecords"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/csw?request=GetRecordByID": {
      "get": {
        "tags": [
          "CSW"
        ],
        "summary": "GetRecordByID",
        "description": "Return Catalog Service record description",
        "operationId": "getGetRecordByID",
        "consumes": [],
        "produces": [
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "request",
            "description": "Type of OGC request. Fixed to GetRecordByID",
            "required": true,
            "type": "string",
            "enum": [
              "GetRecordByID"
            ]
          },
          {
            "name": "service",
            "in": "query",
            "description": "indicates OGC service type. Fixed to CSW",
            "required": true,
            "type": "string",
            "enum": [
              "CSW"
            ]
          },
          {
            "name": "version",
            "in": "query",
            "description": "CSW version",
            "required": true,
            "type": "string",
            "enum": [
              "2.0.2"
            ]
          },
          {
            "name": "id",
            "in": "query",
            "description": "metadata document id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    }
  },
  "definitions": {
    "GetRecords": {
      "type": "object",
      "xml": {
        "namespace": "http://www.opengis.net/cat/csw/2.0.2",
        "prefix": "csw"
      },
      "properties": {
        "version": {
          "type": "string",
          "enum": [
            "2.0.2"
          ],
          "xml": {
            "attribute": true
          }
        },
        "service": {
          "type": "string",
          "enum": [
            "CSW"
          ],
          "xml": {
            "attribute": true
          }
        },
        "resultType": {
          "type": "string",
          "enum": [
            "results",
            "hits"
          ],
          "xml": {
            "attribute": true
          }
        },
        "startPosition": {
          "type": "integer",
          "enum": [1],
          "xml": {
            "attribute": true
          }
        },
        "maxRecords": {
          "type": "integer",
          "enum": [10],
          "xml": {
            "attribute": true
          }
        },

        "xmlns:ogc": {
          "type": "string",
          "enum": ["http://www.opengis.net/ogc"],
          "xml": {
            "attribute": true
          }
        },
        "xmlns:gml": {
          "type": "string",
          "enum": ["http://www.opengis.net/gml"],
          "xml": {
            "attribute": true
          }
        },

        "csw:Query": {
          "type": "object",
          "properties": {
            "typeNames": {
              "type": "string",
              "enum": ["csw:Record"],
              "xml": {
                "attribute": true
              }
            },
            "csw:ElementSetName": {
              "type": "string",
              "enum": ["brief", "summary", "full"]
            },
            "csw:Constraint": {
              "type": "object",
              "properties": {
                "version": {
                  "type": "string",
                  "enum": [
                    "1.1.0"
                  ],
                  "xml": {
                    "attribute": true
                  }
                },
                "ogc:Filter": {
                  "type": "object",
                  "properties": {
                    "ogc:And": {
                      "type": "object",
                      "properties": {
                        "ogc:PropertyIsLike": {
                          "type": "object",
                          "properties": {
                            "wildCard": {
                              "type": "string",
                              "enum": ["*"],
                              "xml": {
                                "attribute": true
                              }
                            },
                            "escape": {
                              "type": "string",
                              "enum": ["\\"],
                              "xml": {
                                "attribute": true
                              }
                            },
                            "singleChar": {
                              "type": "string",
                              "enum": ["?"],
                              "xml": {
                                "attribute": true
                              }
                            },
                            "ogc:PropertyName": {
                              "type": "string",
                              "enum": ["AnyText"]
                            },
                            "ogc:Literal": {
                              "type": "string",
                              "enum": ["data"]
                            }
                          }
                        },
                        "ogc:PropertyIsEqualTo": {
                          "type": "object",
                          "properties": {
                            "ogc:PropertyName": {
                              "type": "string",
                              "enum": ["dc:type"]
                            },
                            "ogc:Literal": {
                              "type": "string",
                              "enum": ["liveData"]
                            }
                          }
                        },
                        "ogc:BBOX": {
                          "type": "object",
                          "properties": {
                            "ogc:PropertyName": {
                              "type": "string",
                              "enum": ["ows:BoundingBox"]
                            },
                            "gml:Envelope": {
                              "type": "object",
                              "properties": {
                                "gml:lowerCorner": {
                                  "type": "string",
                                  "enum": ["-180 -90"]
                                },
                                "gml:upperCorner": {
                                  "type": "string",
                                  "enum": ["180 90"]
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
